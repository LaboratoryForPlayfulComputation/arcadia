/* Import all components */
@import 'semantic';
@import 'pxt';
@import 'themes/default/globals/site.variables';
@import 'themes/pxt/globals/site.variables';
@import 'site/globals/site.variables';

/* Reference import */
@import (reference) "semantic.less";

/*******************************
    Add your custom CSS here
*******************************/

.ui.item.logo .name {
    font-size: 15px;
    font-family: @headerFont;
    font-weight: 400;
    text-transform: uppercase;
    margin-left: 1rem;
}

.blocklyToolboxDiv, .monacoToolboxDiv {
    font-family: @fontName;
    box-shadow: 0px 0px 2px 0px rgba(0,0,0,0.12), 0px 2px 2px 0px rgba(0,0,0,0.24);
    padding: 1px;
}

.blocklyHtmlInput {
    color: black;
}

.blocklyTreeRow {
    text-transform: lowercase;
    padding: 0px;
}

rect:hover {
    opacity: 0.5;
    border-color: "yellow";
    border-width: 1px;
}

.blocklyScrollbarHandle {
    fill: #000000;
}

#menubar .ui.menu .item.editor-menuitem {
    background: fade(@grey, 30%) !important;
}


div.simframe {
    border: solid 4px #EFEFEF;
    background-color: white;
}

.red-sim {
    filter: grayscale(100%) sepia(100%) hue-rotate(90deg);
}

.orange-sim {
    filter: grayscale(100%) sepia(100%) hue-rotate(90deg);
}

.yellow-sim {
    filter: grayscale(100%) sepia(100%) hue-rotate(90deg);
}

.green-sim {
    filter: grayscale(100%) sepia(100%) hue-rotate(90deg);
}

.blue-sim {
    filter: grayscale(100%) sepia(100%) hue-rotate(90deg);
}

.purple-sim {
    filter: grayscale(100%) sepia(100%) hue-rotate(90deg);
}

.huerotate-sim {
    filter: hue-rotate(90deg);
}

.highcontrast-sim {
    filter: contrast(200%);
}

.grayscale-sim {
    filter: grayscale(100%);
}

.sepia-sim {
    filter: sepia(100%);
}

.saturate-sim {
    filter: saturate(1);
}

.invert-sim {
    filter: invert(100%);
}

.blur-sim {
    filter: blur(5px);
}

/* Mobile */
@media only screen and (max-width: @largestMobileScreen) {
}

/* Tablet */
@media only screen and (min-width: @tabletBreakpoint) and (max-width: @largestTabletScreen) {
}

/* Small Monitor */
@media only screen and (min-width: @computerBreakpoint) and (max-width: @largestSmallMonitor) {
}

/* Large Monitor */
@media only screen and (min-width: @largeMonitorBreakpoint) {
}
