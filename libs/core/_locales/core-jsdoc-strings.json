{
  "Math.abs": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
  "Math.abs|param|x": "A numeric expression for which the absolute value is needed.",
  "Math.acos": "Returns the arccosine (in radians) of a number",
  "Math.acos|param|x": "A number",
  "Math.asin": "Returns the arcsine (in radians) of a number",
  "Math.asin|param|x": "A number",
  "Math.atan": "Returns the arctangent (in radians) of a number",
  "Math.atan2": "Returns the arctangent of the quotient of its arguments.",
  "Math.atan2|param|x": "A number",
  "Math.atan2|param|y": "A number",
  "Math.atan|param|x": "A number",
  "Math.ceil": "Returns the smallest number greater than or equal to its numeric argument.",
  "Math.ceil|param|x": "A numeric expression.",
  "Math.cos": "Returns the cosine of a number.",
  "Math.cos|param|x": "An angle in radians",
  "Math.exp": "Returns returns ``e^x``.",
  "Math.exp|param|x": "A number",
  "Math.floor": "Returns the greatest number less than or equal to its numeric argument.",
  "Math.floor|param|x": "A numeric expression.",
  "Math.idiv": "Returns the value of integer signed 32 bit division of two numbers.",
  "Math.idiv|param|x": "The first number",
  "Math.idiv|param|y": "The second number",
  "Math.imul": "Returns the value of integer signed 32 bit multiplication of two numbers.",
  "Math.imul|param|x": "The first number",
  "Math.imul|param|y": "The second number",
  "Math.log": "Returns the natural logarithm (base e) of a number.",
  "Math.log|param|x": "A number",
  "Math.max": "Returns the larger of two supplied numeric expressions.",
  "Math.min": "Returns the smaller of two supplied numeric expressions.",
  "Math.pow": "Returns the value of a base expression taken to a specified power.",
  "Math.pow|param|x": "The base value of the expression.",
  "Math.pow|param|y": "The exponent value of the expression.",
  "Math.random": "Returns a pseudorandom number between 0 and 1.",
  "Math.randomRange": "Returns a pseudorandom number between min and max included. \nIf both numbers are integral, the result is integral.",
  "Math.randomRange|param|max": "the upper inclusive bound, eg: 10",
  "Math.randomRange|param|min": "the lower inclusive bound, eg: 0",
  "Math.round": "Returns a supplied numeric expression rounded to the nearest number.",
  "Math.round|param|x": "The value to be rounded to the nearest number.",
  "Math.sign": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
  "Math.sign|param|x": "The numeric expression to test",
  "Math.sin": "Returns the sine of a number.",
  "Math.sin|param|x": "An angle in radians",
  "Math.sqrt": "Returns the square root of a number.",
  "Math.sqrt|param|x": "A numeric expression.",
  "Math.tan": "Returns the tangent of a number.",
  "Math.tan|param|x": "An angle in radians",
  "Math.trunc": "Returns the number with the decimal part truncated.",
  "Math.trunc|param|x": "A numeric expression.",
  "String.charAt": "Returns the character at the specified index.",
  "String.charAt|param|index": "The zero-based index of the desired character.",
  "String.charCodeAt": "Returns the Unicode value of the character at the specified location.",
  "String.charCodeAt|param|index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
  "String.compare": "Determines whether relative order of two strings (in ASCII encoding).",
  "String.compare|param|that": "String to compare to target string",
  "String.concat": "Returns a string that contains the concatenation of two or more strings.",
  "String.concat|param|other": "The string to append to the end of the string.",
  "String.fromCharCode": "Make a string from the given ASCII character code.",
  "String.isEmpty": "Returns a value indicating if the string is empty",
  "String.length": "Returns the length of a String object.",
  "String.substr": "Return substring of the current string.",
  "String.substr|param|length": "number of characters to extract",
  "String.substr|param|start": "first character index; can be negative from counting from the end, eg:0",
  "colors": "Colors",
  "colors.named": "Get the RGB value of a known color",
  "colors.rgb": "Converts red, green, blue channels into a RGB color",
  "colors.rgb|param|blue": "value of the blue channel between 0 and 255. eg: 255",
  "colors.rgb|param|green": "value of the green channel between 0 and 255. eg: 255",
  "colors.rgb|param|red": "value of the red channel between 0 and 255. eg: 255",
  "console.log": "Print out message",
  "design": "Design",
  "design.setColor": "Sets the color that displays when the marker is detected",
  "design.setModel": "Sets the shape that displays when the marker is detected",
  "design.setNumber": "Sets the number that displays when the marker is detected",
  "design.setOpacity": "Sets the opacity of the shape that is displayed on the marker. 0 is invisible, 1 is fully opaque. The default value is 0.9.",
  "design.setPosition": "Sets the position of the 3D object that is rendered in relation to the marker. Shapes will automatically have a default position of (0, 0, 0).",
  "design.setRotation": "Sets the rotation of the 3D object that is rendered in relation to the marker. Shapes will automatically have a default rotation of 0Â°.",
  "design.setRotation3D": "Sets the rotation of the 3D object that is rendered in relation to the marker. Shapes will automatically have a default rotation of (0, 0, 0).",
  "design.setScale": "Sets the size of the 3D object that is rendered. Shapes will automatically have a default scale value of 1.",
  "design.setScale3D": "Sets the size of the 3D object that is rendered. Shapes will automatically have a default scale value of (1, 1, 1).",
  "design.setShape": "Sets the shape that displays when the marker is detected",
  "design.setText": "Sets the text  that displays when the marker is detected",
  "design.setTextColor": "Sets the text color that displays when the marker is detected",
  "fx.addGlobalEffect": "Add an effect to a sequence.\n\n\n\nRemove an effect from a sequence.\n\n\n\nAdd an effect to every active instrument.",
  "fx.addGlobalEffect|param|effect": "which effect to use",
  "fx.removeGlobalEffect": "Remove an effect to every active instrument.",
  "fx.removeGlobalEffect|param|effect": "which effect to use",
  "loops.forever": "Repeats the code forever in the background. On each iteration, allows other code to run.",
  "loops.forever|param|body": "the code to repeat",
  "loops.pause": "Pause for the specified time in milliseconds",
  "loops.pause|param|ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
  "markers": "Augment Reality markers",
  "markers.distance": "Gets the distance between the centers of 2 markers",
  "markers.marker": "An augmented reality marker",
  "markers.position": "Gets the x, y, z positional coordinates of a marker",
  "markers.rotation": "Gets the x, y, z rotational values of a marker",
  "motion": "Motion",
  "motion.onEvent": "Allows use to define callbacks for a marker event",
  "motion.onMultiEvent": "Allows user to define callbacks that trigger once when the multi marker event is true",
  "motion.whileEvent": "Allows use to define callbacks for a marker event",
  "motion.whileMultiEvent": "Allows user to define callbacks that fire while the multi marker event is true",
  "music": "Music",
  "music.noteFrequency": "Get the frequency of a note",
  "music.noteFrequency|param|name": "the note name, eg: Note.C",
  "music.oscFreq": "Change the frequency (pitch) of an oscillator",
  "music.oscFreq|param|wave": "type of sound wave",
  "music.playChordCommand": "Play a chord of an array of notes for a duration of time. Can play up to 5 notes.",
  "music.playChordCommand|param|duration": "number of beats to play tone for",
  "music.playDrum": "Play a type of drum sound",
  "music.playDrum|param|drum": "which drum sound to use",
  "music.playTone": "Play a tone for a duration of time",
  "music.playTone|param|duration": "number of beats to play tone for, eg: BeatFraction.Quarter",
  "music.playTone|param|note": "pitch of the tone to play in Hertz (Hz)",
  "music.rest": "Rest for a duration of time",
  "music.rest|param|duration": "number of beats to rest for",
  "music.setTempo": "Set the beats per minute (tempo)",
  "music.setVolume": "Set the master volume. Choose a number in the range of 0-100, the default volume is 50.",
  "music.startOsc": "Start an oscillator type",
  "music.startOsc|param|wave": "type of sound wave",
  "music.stopOsc": "Stop an oscillator type",
  "music.stopOsc|param|wave": "type of sound wave",
  "phrases.drumPhrase": "Create a drum pattern",
  "phrases.drumPhrase|param|name": "@param beat a string describing the beat",
  "phrases.loopPhrase": "Loops a musical phrase",
  "phrases.playPhrase": "Plays a phrase once",
  "phrases.stopPhrase": "Stop a musical phrase"
}